<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blueocean.azbrain.dao.UserEvaluateMapper">
  <resultMap id="user_evaluate" type="com.blueocean.azbrain.model.UserEvaluate">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="log_id" jdbcType="INTEGER" property="logId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="by_user_id" jdbcType="INTEGER" property="byUserId" />
    <result column="by_user_flag" jdbcType="INTEGER" property="byUserFlag" />
    <result column="evaluate_code" jdbcType="VARCHAR" property="code" />
    <result column="evaluate_name" jdbcType="VARCHAR" property="name" />
    <result column="evaluate_value" jdbcType="VARCHAR" property="value" />
    <result column="evaluate_value_type" jdbcType="VARCHAR" property="valueType" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  </resultMap>

  <sql id="Base_Column_List">
    id, log_id, user_id, by_user_id, evaluate_code, evaluate_name, evaluate_value, evaluate_value_type, create_time
  </sql>

  <select id="get" parameterType="java.lang.Integer" resultMap="user_evaluate">
    select 
      <include refid="Base_Column_List" />
    from
      azbrain_user_evaluate
    where
      id = #{id,jdbcType=INTEGER}
  </select>

  <insert id="insertBatch" parameterType="java.util.List">
    insert into azbrain_user_evaluate (
      log_id,
      user_id,
      by_user_id,
      by_user_flag,
      evaluate_code,
      evaluate_name,
      evaluate_value,
      evaluate_value_type,
      create_time
    )
    values
    <foreach collection ="list" item="eval" separator =",">
    (
      #{eval.logId,jdbcType=INTEGER},
      #{eval.userId,jdbcType=INTEGER},
      #{eval.byUserId,jdbcType=INTEGER},
      #{eval.byUserFlag,jdbcType=INTEGER},
      #{eval.code,jdbcType=VARCHAR},
      #{eval.name,jdbcType=VARCHAR},
      #{eval.value,jdbcType=VARCHAR},
      #{eval.valueType,jdbcType=VARCHAR},
      #{eval.createTime,jdbcType=TIMESTAMP}
    )
    </foreach>
  </insert>

  <select id="getEvaluationByLog" resultMap="user_evaluate">
    SELECT
      e.evaluate_name,
      e.evaluate_value,
      e.create_time,
      u1.name as userName,
      u2.name as byUserName
    FROM
      azbrain_user_evaluate e
    INNER JOIN
      azbrain_user u1
    ON
      e.user_id = u1.id
    INNER JOIN
      azbrain_user u2
    ON
      e.by_user_id = u2.id
    WHERE
      e.log_id = #{logId}
    <if test="userId != null">
      AND e.by_user_id = #{userId}
    </if>
  </select>

  <select id="evaluateOnUser" resultType="java.util.Map">
    select
      u.id as uid,
      u.name,
      e.create_time,
      GROUP_CONCAT(evaluate_name,':', evaluate_value) as evaluation
    from
      azbrain_user_evaluate e
    inner join
      azbrain_user u
    on
      u.id = e.user_id
    where
      e.by_user_id = #{byUserId}
    AND
      e.status != '99'
    <if test="name != null">
      AND u.name LIKE CONCAT('%',#{name},'%')
    </if>
    <if test="startTime != null">
      <![CDATA[ AND e.create_time >= #{startTime} ]]>
    </if>
    <if test="endTime != null">
      <![CDATA[ AND e.create_time <= #{endTime} ]]>
    </if>
    group by u.id, u.name, e.create_time
  </select>

  <select id="summaryUserEvaluation" resultType="java.util.Map">
    SELECT
      a.by_user_id,
      u.name,
      GROUP_CONCAT(evaluate_name,':', evaluate_value) as evaluation,
      u.good_num,
      u.neutral_num,
      u.bad_num,
      u.break_contract_num
    FROM
      (
      SELECT
        by_user_id,
        evaluate_name,
        AVG(evaluate_value) as evaluate_value
      FROM
        azbrain_user_evaluate e
      WHERE
        e.evaluate_value_type = "star"
      AND
        e.by_user_flag = #{flag}
      AND
        e.status != '99'
      GROUP BY
        by_user_id, evaluate_name
      ) a
    INNER JOIN
      azbrain_user u
    ON
      a.by_user_id = u.id
    WHERE 1=1
    <if test="name != null">
      AND u.name LIKE CONCAT('%',#{name},'%')
    </if>
    GROUP BY
      by_user_id, u.name, u.good_num, u.neutral_num, u.bad_num, u.break_contract_num
  </select>

  <update id="deleteUserEvaluate" >
    UPDATE
      azbrain_user_evaluate e
    SET
      status = '99'
    WHERE 1=1
    <if test="userId != null">
      AND user_id = #{userId}
    </if>
    <if test="byUserId != null">
      AND by_user_id = #{byUserId}
    </if>
  </update>
</mapper>